_Component({
                selector: 'flk-multiple-inputs',
                c: 'FlkMultipleInputs', // c for component name
                unique: false, // flag to determine if the component object will be unique or not
                observable: true,
                observe: ['id','label','options','isMultiLingual','languages','subName','optionName','required','name','removeOption','addNewOption'],
                children: {},
                render: function (component) {
                    let elhagpp = eo('div',null,null,`class`,`form-group`);
let elQVD5t = eo('label',null,null,`for`,`${ component.id }`);
text(component.label);
ec('label');
for (let i in component.options) {
let option = component.options[i]; 
 let ii3boU = 'pi5tU1C' + i;
let elr8RKF = eo('div','dkjx96srzHZ3' + i+ii3boU,null,`class`,`row m-t-1`);
let elETUGz = eo('div','kgnff'+ii3boU,null,`class`,`col-sm-10`);
let cnd8PF9 = component.isMultiLingual;
this.setState('st9UCJ2', cnd8PF9);
let cndjRC6 = !(cnd8PF9);
this.setState('stqLUsX', cndjRC6);
if (cnd8PF9) { 
console.log(2);
for (let langIndex in component.languages) {
let languageCode = component.languages[langIndex]; 
 let ii31gP = 'fQNhB71' + langIndex;
let elCranh = ev('input','IdhxDDn1v8iT' + langIndex+ii3boU+ii31gP,null, eventListeners, {oninput:[function(e) {var $el = this;Object.set(option, component.subName ? component.subName + '.' + languageCode : languageCode, $el.value)},function(e) {let value = this.value.trim();if (component.required && Is.empty(value)) {return cfrmdlr.addError(component.name + '.' + i + '.' + (component.subName ? component.subName + '.' : '') + languageCode, 'required', trans('validation.required'));}return cfrmdlr.removeError(component.name + '.' + i + '.' + (component.subName ? component.subName + '.' : '') + languageCode);}]},`name`,`${(component.name + '.' + i + '.' + (component.subName ? component.subName + '.' : '') + languageCode).toInputName()}`,`placeholder`,`${component.optionName + ' ' + languageCode}`,`value`,`${component.subName ? Object.get(option, component.subName + '.' + languageCode) : option[languageCode]}`,`type`,`text`,`class`,`form-control`);
let cnd09Ur = cfrmdlr.getError(component.name + '.' + i + '.' + (component.subName ? component.subName + '.' : '') + languageCode);
this.setState('stt9adH', cnd09Ur);
if (cnd09Ur) { 
let eloeUKO = eo('div','XF0ff'+ii3boU+ii31gP,null,`class`,`error-msg`);
text(cfrmdlr.getError(component.name + '.' + i + '.' + (component.subName ? component.subName + '.' : '') + languageCode));
ec('div');
}}
}else { 
let elGE1OP = ev('input','w2yff'+ii3boU,null, eventListeners, {oninput:[function(e) {component.options[i] = this.value;},function(e) {let value = this.value.trim();if (component.required && Is.empty(value)) {return cfrmdlr.addError(component.name + '.' + i, 'required', trans('validation.required'));}return cfrmdlr.removeError(component.name + '.' + i);}]},`value`,`${fval(component.options[i])}`,`name`,`${(component.name + '.' + i).toInputName()}`,`placeholder`,`${component.optionName}`,`type`,`text`,`class`,`form-control`);
elGE1OP.value = fval(component.options[i]);
let cndqDMu = cfrmdlr.getError(component.name + '.' + i);
this.setState('stnU8qI', cndqDMu);
if (cndqDMu) { 
let el488Jd = eo('div','1cdff'+ii3boU,null,`class`,`error-msg`);
text(cfrmdlr.getError(component.name + '.' + i));
ec('div');
}}ec('div');
let cndAb6U = ! component.required || Number(i) > 0;
this.setState('stf5Aib', cndAb6U);
if (cndAb6U) { 
let elxJ1jC = eo('div','Th6ff'+ii3boU,null,`class`,`col-sm-2`);
let el2oHKM = eo('button','hOHff'+ii3boU,null, eventListeners, {onclick:[function(e) {var $el = this;component.removeOption(i)}]},`title`,``,`type`,`button`,`class`,`btn btn-circle m-0 btn-sm icon btn-danger`);
let elxwmir = eo('i','wtgff'+ii3boU,null,`class`,`${fas('trash') + ' icon'}`);
ec('i');
ec('button');

                    setTimeout(function () {
                        let $el = el2oHKM;
                        
            true && tippyTooltip($el, {arrow:true,content:`${ trans('deleteItem', component.optionName) }`});
        ;
                    }, 20);                
                ec('div');
}ec('div');
}
let elwtX0I = eo('div');
let elEauVD = eo('button',null,null, eventListeners, {onclick:[function(e) {var $el = this;component.addNewOption()}]},`title`,``,`type`,`button`,`class`,`btn icon btn-sm btn-circle btn-primary`);
let elpzvF7 = eo('i',null,null,`class`,`${fas('plus') + ' icon'}`);
ec('i');
ec('button');

                    setTimeout(function () {
                        let $el = elEauVD;
                        
            true && tippyTooltip($el, {arrow:true,content:`${ trans('add-new-item', component.optionName) }`});
        ;
                    }, 20);                
                ec('div');
ec('div');

                    this.isReadyToGo();
                }
        });