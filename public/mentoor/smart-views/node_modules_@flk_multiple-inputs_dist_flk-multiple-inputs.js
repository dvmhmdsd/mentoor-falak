_Component({
                selector: 'flk-multiple-inputs',
                c: 'FlkMultipleInputs', // c for component name
                unique: false, // flag to determine if the component object will be unique or not
                observable: true,
                observe: ['id','label','options','isMultiLingual','languages','subName','optionName','required','name','removeOption','addNewOption'],
                children: {},
                render: function (component) {
                    let elTBiDL = eo('div',null,null,`class`,`form-group`);
let eloYTgr = eo('label',null,null,`for`,`${ component.id }`);
text(component.label);
ec('label');
for (let i in component.options) {
let option = component.options[i]; 
 let iitD2a = 'QgaB1mA' + i;
let elHrEdd = eo('div','zXtBWU7MOVel' + i+iitD2a,null,`class`,`row m-t-1`);
let elHPm_2 = eo('div','vMvff'+iitD2a,null,`class`,`col-sm-10`);
let cndL_ck = component.isMultiLingual;
this.setState('st6ztD0', cndL_ck);
let cndJFtf = !(cndL_ck);
this.setState('st8CrI7', cndJFtf);
if (cndL_ck) { 
console.log(2);
for (let langIndex in component.languages) {
let languageCode = component.languages[langIndex]; 
 let iiH4lj = 'UsNRxN6' + langIndex;
let elG6X_B = ev('input','zdpov11dBw0Y' + langIndex+iitD2a+iiH4lj,null, eventListeners, {oninput:[function(e) {var $el = this;Object.set(option, component.subName ? component.subName + '.' + languageCode : languageCode, $el.value)},function(e) {let value = this.value.trim();if (component.required && Is.empty(value)) {return cfrmdlr.addError(component.name + '.' + i + '.' + (component.subName ? component.subName + '.' : '') + languageCode, 'required', trans('validation.required'));}return cfrmdlr.removeError(component.name + '.' + i + '.' + (component.subName ? component.subName + '.' : '') + languageCode);}]},`name`,`${(component.name + '.' + i + '.' + (component.subName ? component.subName + '.' : '') + languageCode).toInputName()}`,`placeholder`,`${component.optionName + ' ' + languageCode}`,`value`,`${component.subName ? Object.get(option, component.subName + '.' + languageCode) : option[languageCode]}`,`type`,`text`,`class`,`form-control`);
let cndtAED = cfrmdlr.getError(component.name + '.' + i + '.' + (component.subName ? component.subName + '.' : '') + languageCode);
this.setState('stOUCaJ', cndtAED);
if (cndtAED) { 
let elvAhoW = eo('div','7fXff'+iitD2a+iiH4lj,null,`class`,`error-msg`);
text(cfrmdlr.getError(component.name + '.' + i + '.' + (component.subName ? component.subName + '.' : '') + languageCode));
ec('div');
}}
}else { 
let elrPzBR = ev('input','Nxrff'+iitD2a,null, eventListeners, {oninput:[function(e) {component.options[i] = this.value;},function(e) {let value = this.value.trim();if (component.required && Is.empty(value)) {return cfrmdlr.addError(component.name + '.' + i, 'required', trans('validation.required'));}return cfrmdlr.removeError(component.name + '.' + i);}]},`value`,`${fval(component.options[i])}`,`name`,`${(component.name + '.' + i).toInputName()}`,`placeholder`,`${component.optionName}`,`type`,`text`,`class`,`form-control`);
elrPzBR.value = fval(component.options[i]);
let cnd3Zda = cfrmdlr.getError(component.name + '.' + i);
this.setState('stsQNct', cnd3Zda);
if (cnd3Zda) { 
let elltT7A = eo('div','mS_ff'+iitD2a,null,`class`,`error-msg`);
text(cfrmdlr.getError(component.name + '.' + i));
ec('div');
}}ec('div');
let cndr2qC = ! component.required || Number(i) > 0;
this.setState('stJYXvu', cndr2qC);
if (cndr2qC) { 
let elbsjSH = eo('div','Ituff'+iitD2a,null,`class`,`col-sm-2`);
let el1apCd = eo('button','MNIff'+iitD2a,null, eventListeners, {onclick:[function(e) {var $el = this;component.removeOption(i)}]},`title`,``,`type`,`button`,`class`,`btn btn-circle m-0 btn-sm icon btn-danger`);
let elcENRc = eo('i','lQZff'+iitD2a,null,`class`,`${fas('trash') + ' icon'}`);
ec('i');
ec('button');

                    setTimeout(function () {
                        let $el = el1apCd;
                        
            true && tippyTooltip($el, {arrow:true,content:`${ trans('deleteItem', component.optionName) }`});
        ;
                    }, 20);                
                ec('div');
}ec('div');
}
let elp4Al2 = eo('div');
let elaFOE9 = eo('button',null,null, eventListeners, {onclick:[function(e) {var $el = this;component.addNewOption()}]},`title`,``,`type`,`button`,`class`,`btn icon btn-sm btn-circle btn-primary`);
let elRseUR = eo('i',null,null,`class`,`${fas('plus') + ' icon'}`);
ec('i');
ec('button');

                    setTimeout(function () {
                        let $el = elaFOE9;
                        
            true && tippyTooltip($el, {arrow:true,content:`${ trans('add-new-item', component.optionName) }`});
        ;
                    }, 20);                
                ec('div');
ec('div');

                    this.isReadyToGo();
                }
        });